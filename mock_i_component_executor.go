// Code generated by mockery v2.30.1. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIComponentExecutor is an autogenerated mock type for the IComponentExecutor type
type MockIComponentExecutor struct {
	mock.Mock
}

// InvokeExecutingTask provides a mock function with given fields: ctx
func (_m *MockIComponentExecutor) InvokeExecutingTask(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// canBeInvokedAsync provides a mock function with given fields:
func (_m *MockIComponentExecutor) canBeInvokedAsync() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// cancel provides a mock function with given fields: err
func (_m *MockIComponentExecutor) cancel(err error) {
	_m.Called(err)
}

// invokeAsyncTask provides a mock function with given fields: ctx
func (_m *MockIComponentExecutor) invokeAsyncTask(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// invokeSyncTask provides a mock function with given fields: ctx
func (_m *MockIComponentExecutor) invokeSyncTask(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIComponentExecutor creates a new instance of MockIComponentExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIComponentExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIComponentExecutor {
	mock := &MockIComponentExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
